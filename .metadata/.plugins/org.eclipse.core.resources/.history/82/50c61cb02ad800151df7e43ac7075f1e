package ZapetajkiSPool;


import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

import ZapetajkiS5Threada.MyThread;

public class ZapetaikiSPool {
	
//	Niki, tova e tvoqt kod kojto se opitava da promenq no cikula s razdelqneto baq me zatrudnqva. Izuchavam go :)

		private static final int NUMBER_OF_THREADS = 8;
		private static final int COUNT_OF_DIFFERENT_THREADS = 5;

		public static void main(String[] args) throws FileNotFoundException, InterruptedException, ExecutionException {
			Scanner scanner = new Scanner(System.in);
			try {
				scanner = new Scanner(new File("war_peace.txt"));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
			StringBuilder builder = new StringBuilder();

			while (scanner.hasNextLine()) {
				builder.append(scanner.nextLine());
			}
			String allElements = builder.toString();
			int partForAnalize = allElements.length() / COUNT_OF_DIFFERENT_THREADS;
			
			long start = System.currentTimeMillis();
			
			ExecutorService threadPool = Executors.newFixedThreadPool(NUMBER_OF_THREADS);
			
			List<Future> results = new ArrayList<Future>();
			
			
			int startIndex = 0;
			for (int part = 0; part <= NUMBER_OF_THREADS-1; part++) {
				
				results.add(threadPool.submit(new MyThreadForPool((allElements.substring(startIndex, startIndex + partForAnalize)))));
				startIndex += partForAnalize;
			int count = 0;
			
			for (Future<Integer> num : results) {
				count += num.get();
			}
			
			System.out.println(count);
			System.out.println("Time " + (System.currentTimeMillis() - start));
			
			threadPool.shutdown();
		}

	}
}
